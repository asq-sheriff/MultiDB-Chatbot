version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: chatbot-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatbot_app}
      POSTGRES_USER: ${POSTGRES_USER:-chatbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  mongodb:
    image: mongodb/mongodb-atlas-local:latest
    container_name: mongodb-atlas-local
    hostname: mongodb-atlas-local
    ports:
      - "27017:27017"
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=root
      - MONGODB_INITDB_ROOT_PASSWORD=example
      - MONGODB_REPLICA_SET_NAME=mongodb-atlas-local
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - mongo-mongot:/data/mongot
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # ScyllaDB Node 1 (Seed Node)
  scylla-node1:
    platform: linux/arm64 # Or linux/amd64 if you have an Intel Mac
    image: scylladb/scylla:latest
    container_name: scylla-node1
    ports:
      - "9042:9042"
      - "10000:10000"
    volumes:
      - scylla_data1:/var/lib/scylla
    restart: unless-stopped
    command: --seeds=scylla-node1 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status | grep -w 'UN'" ]
      interval: 10s
      timeout: 5s
      retries: 24 # Give the seed node up to 4 minutes to become healthy

  # ScyllaDB Node 2 - Waits for Node 1 to be HEALTHY
  scylla-node2:
    platform: linux/arm64
    image: scylladb/scylla:latest
    container_name: scylla-node2
    ports:
      - "9043:9042"
      - "10001:10000"
    volumes:
      - scylla_data2:/var/lib/scylla
    restart: unless-stopped
    depends_on:
      scylla-node1:
        condition: service_healthy # CRITICAL CHANGE
    command: --seeds=scylla-node1 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status | grep -w 'UN'" ]
      interval: 10s
      timeout: 5s
      retries: 12

  # ScyllaDB Node 3 - Waits for Node 2 to be HEALTHY
  scylla-node3:
    platform: linux/arm64
    image: scylladb/scylla:latest
    container_name: scylla-node3
    ports:
      - "9044:9042"
      - "10002:10000"
    volumes:
      - scylla_data3:/var/lib/scylla
    restart: unless-stopped
    depends_on:
      scylla-node2:
        condition: service_healthy # CRITICAL CHANGE
    command: --seeds=scylla-node1 --smp 1 --memory 750M --overprovisioned 1 --api-address 0.0.0.0
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status | grep -w 'UN'" ]
      interval: 10s
      timeout: 5s
      retries: 12
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multidb-chatbot
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Sensible defaults for local stack; override via .env if needed
      MONGODB_URI: "mongodb://root:example@mongodb-atlas-local:27017/?replicaSet=mongodb-atlas-local&directConnection=true"
      REDIS_URL: "redis://my-redis:6379/0"
      POSTGRES_DSN: "postgresql+asyncpg://chatbot_user:secure_password@chatbot-postgres:5432/chatbot_app"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      scylla-node1:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  scylla_data1:
  scylla_data2:
  scylla_data3:
  mongo-data:
  mongo-config:
  mongo-mongot: